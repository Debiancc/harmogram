// Generated by CoffeeScript 1.3.3
(function() {
  var Renderer;

  Renderer = (function() {

    Renderer.prototype.OFFSET = 100;

    Renderer.prototype.BARS = 104;

    Renderer.prototype.BARWIDTH = 60;

    Renderer.prototype.BARSOFFSET = 0;

    Renderer.prototype.activeShader = "paper";

    Renderer.prototype.hue = 0;

    Renderer.prototype.theI = 0;

    Renderer.prototype.hueDirection = "up";

    Renderer.prototype.runRenderer = true;

    Renderer.prototype.points = [];

    Renderer.prototype.path = null;

    Renderer.prototype.changeHue = false;

    Renderer.prototype.smooth = true;

    function Renderer() {
      this.freqByteData = new Uint8Array(Sounder.control.analyser.frequencyBinCount);
      this.initEvents();
      this.initPaper();
      this;

    }

    Renderer.prototype.initPaper = function() {
      paper.setup($('canvas')[0]);
      this.bg = new paper.Rectangle(paper.view.bounds);
      paper.view.fillColor = 'rgb(255,2555,233)';
      this.path = new paper.Path();
      this.path.strokeColor = 'black';
      this.path.strokeWidth = 1;
      console.log('started ', paper, 'engine on ', this.path);
      this.TOTALWIDTH = paper.view.size.width;
      this.TOTALHEIGHT = paper.view.size.height;
      console.log(this.TOTALWIDTH, this.TOTALHEIGHT);
      this.POINTSGAP = this.TOTALWIDTH / this.BARS;
      this.PI = Math.PI;
      this.GOLDEN = 1.618;
      this.initPoints();
      console.log("each point is ", this.POINTSGAP, "apart from each other");
      return paper.view.draw();
    };

    Renderer.prototype.initPoints = function() {
      var i, point, w;
      console.log(this.BARS);
      i = 0;
      while (i <= this.BARS) {
        w = this.TOTALWIDTH - (this.POINTSGAP * i);
        point = new paper.Point(w, this.TOTALHEIGHT);
        this.path.add(point);
        i += 1;
      }
      return console.log(this.path.segments[0].point.x, this.path.segments[this.path.segments.length - 1].point.x);
    };

    Renderer.prototype.updatePos = function() {
      var i, oldHeight, w, _i, _ref, _results;
      oldHeight = this.TOTALHEIGHT;
      this.TOTALWIDTH = paper.view.size.width;
      this.TOTALHEIGHT = paper.view.size.height;
      this.POINTSGAP = this.TOTALWIDTH / this.BARS;
      _results = [];
      for (i = _i = 0, _ref = this.BARS; _i < _ref; i = _i += 1) {
        w = this.TOTALWIDTH - (this.POINTSGAP * i);
        this.path.segments[i].point.x = w;
        if (this.path.segments[i].point.y === oldHeight) {
          _results.push(this.path.segments[i].point.y = this.TOTALHEIGHT);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Renderer.prototype.initEvents = function() {
      var debouncedresize,
        _this = this;
      $(this).on('drawPoints', function() {});
      $(this).on('pause', function() {
        return _this.runRenderer = false;
      });
      $(this).on('start', function() {
        _this.runRenderer = true;
        return _this.render();
      });
      $(this).on('changeShader', function(e, shader) {
        $('body').attr('style', '');
        return _this.activeShader = shader;
      });
      debouncedresize = _.debounce((function() {
        return _this.updatePos();
      }), 10);
      return $(window).resize(function() {
        return debouncedresize();
      });
    };

    Renderer.prototype.shader = function(value) {
      var i, magnitude, _i, _ref,
        _this = this;
      for (i = _i = 1, _ref = this.path.segments.length - 2; _i <= _ref; i = _i += 1) {
        magnitude = value[Math.round(i * (this.PI * 0.9))] * this.GOLDEN;
        this.path.segments[(this.path.segments.length - 1) - i].point.y = this.TOTALHEIGHT - magnitude;
      }
      this.bg.fillColor = "hsla(" + (255 - (value[this.OFFSET] % 255)) + ",30%,80%, 0.1)";
      this.path.strokeColor = "hsla(" + (255 - (value[this.OFFSET] % 255)) + ",20%,60%, 0.2)";
      if (this.smooth) {
        this.path.smooth();
      }
      paper.view.draw();
      return $("body").css("background-color", function() {
        return "hsla(" + (value[_this.OFFSET] % 255) + ",10%,90%, 1)";
      });
    };

    Renderer.prototype.hueChanger = function(looping) {
      if (looping == null) {
        looping = true;
      }
      if (Sounder.renderer.changeHue) {
        window.webkitRequestAnimationFrame(Sounder.renderer.hueChanger);
        if (Sounder.renderer.hueDirection === "up") {
          Sounder.renderer.hue = Sounder.renderer.hue + 1;
        } else if (Sounder.renderer.hueDirection === "down") {
          Sounder.renderer.hue = Sounder.renderer.hue - 1;
        }
        if (Sounder.renderer.hue > 250) {
          return Sounder.renderer.hueDirection = "down";
        } else if (Sounder.renderer.hue < 10) {
          return Sounder.renderer.hueDirection = "up";
        }
      }
    };

    Renderer.prototype.render = function() {
      if (Sounder.renderer.runRenderer) {
        window.webkitRequestAnimationFrame(Sounder.renderer.render);
        Sounder.control.analyser.getByteFrequencyData(Sounder.renderer.freqByteData);
        return Sounder.renderer.shader(Sounder.renderer.freqByteData);
      }
    };

    return Renderer;

  })();

  (function() {
    return Sounder.renderer = new Renderer;
  })();

}).call(this);
